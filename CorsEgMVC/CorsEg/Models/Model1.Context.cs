//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CorsEg.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InstituteManagementShalvinEntities : DbContext
    {
        public InstituteManagementShalvinEntities()
            : base("name=InstituteManagementShalvinEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BatchSchedule> BatchSchedules { get; set; }
    
        public virtual int spAdd(Nullable<int> i, Nullable<int> j)
        {
            var iParameter = i.HasValue ?
                new ObjectParameter("i", i) :
                new ObjectParameter("i", typeof(int));
    
            var jParameter = j.HasValue ?
                new ObjectParameter("j", j) :
                new ObjectParameter("j", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAdd", iParameter, jParameter);
        }
    
        public virtual ObjectResult<spAllBatches_Result> spAllBatches()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAllBatches_Result>("spAllBatches");
        }
    
        public virtual int spInsertBatch(string batchName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> tentativeEndDate, Nullable<int> noOfHours, Nullable<int> hoursTaken, string remarks)
        {
            var batchNameParameter = batchName != null ?
                new ObjectParameter("BatchName", batchName) :
                new ObjectParameter("BatchName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var tentativeEndDateParameter = tentativeEndDate.HasValue ?
                new ObjectParameter("TentativeEndDate", tentativeEndDate) :
                new ObjectParameter("TentativeEndDate", typeof(System.DateTime));
    
            var noOfHoursParameter = noOfHours.HasValue ?
                new ObjectParameter("NoOfHours", noOfHours) :
                new ObjectParameter("NoOfHours", typeof(int));
    
            var hoursTakenParameter = hoursTaken.HasValue ?
                new ObjectParameter("HoursTaken", hoursTaken) :
                new ObjectParameter("HoursTaken", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertBatch", batchNameParameter, startDateParameter, tentativeEndDateParameter, noOfHoursParameter, hoursTakenParameter, remarksParameter);
        }
    
        public virtual int spInsertBatchSchedule(Nullable<int> batchId, Nullable<int> hoursTaken, string topicsTaken, string remarks)
        {
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("BatchId", batchId) :
                new ObjectParameter("BatchId", typeof(int));
    
            var hoursTakenParameter = hoursTaken.HasValue ?
                new ObjectParameter("HoursTaken", hoursTaken) :
                new ObjectParameter("HoursTaken", typeof(int));
    
            var topicsTakenParameter = topicsTaken != null ?
                new ObjectParameter("TopicsTaken", topicsTaken) :
                new ObjectParameter("TopicsTaken", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertBatchSchedule", batchIdParameter, hoursTakenParameter, topicsTakenParameter, remarksParameter);
        }
    }
}
